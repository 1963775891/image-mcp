import axios from 'axios';
import { v4 as uuidv4 } from 'uuid';
import * as crypto from 'crypto';


// 模型映射
const MODEL_MAP: Record<string, string> = {
  'jimeng-3.0': 'high_aes_general_v30l:general_v3.0_18b',
  'jimeng-2.1': 'high_aes_general_v21_L:general_v2.1_L',
  'jimeng-2.0-pro': 'high_aes_general_v20_L:general_v2.0_L',
  'jimeng-2.0': 'high_aes_general_v20:general_v2.0',
  'jimeng-1.4': 'high_aes_general_v14:general_v1.4',
  'jimeng-xl-pro': 'text2img_xl_sft',
};

// 工具函数
const generateUuid = (): string => {
  return uuidv4();
};

const jsonEncode = (obj: any): string => {
  return JSON.stringify(obj);
};

const urlEncode = (str: string): string => {
  return encodeURI(str);
};

const unixTimestamp = () => {
  return parseInt(`${Date.now() / 1000}`);
}


// 常量定义
const DEFAULT_MODEL = 'jimeng-2.1';
const DRAFT_VERSION = '3.0.2';
const DEFAULT_ASSISTANT_ID = '513695'; // 从原始仓库中提取
const WEB_ID = Math.random() * 999999999999999999 + 7000000000000000000;
const USER_ID = generateUuid().replace(/-/g, '');

// 接口定义
interface LogoInfo {
  add_logo?: boolean; // 是否添加水印 默认不添加
  position?: number; // 0-右下角 1-左下角 2-左上角 3-右上角
  language?: number; // 0-中文（AI生成）1-英文（Generated by AI）
  opacity?: number; // 0-1 default: 0.3
  logo_text_content?: string; // 水印文字内容
}

interface ImageGenerationParams {
  model?: string; // 模型名称，默认使用 DEFAULT_MODEL
  prompt: string; // 提示词
  width?: number; // 图像宽度，默认1024
  height?: number; // 图像高度，默认1024
  sample_strength?: number; // 精细度，默认0.5
  negative_prompt?: string; // 反向提示词，默认空
  refresh_token?: string; // 刷新令牌，必需
  req_key?: string; // 自定义参数，兼容旧接口
}

export function generateCookie(refreshToken: string) {
  return [
    `_tea_web_id=${WEB_ID}`,
    `is_staff_user=false`,
    `store-region=cn-gd`,
    `store-region-src=uid`,
    `sid_guard=${refreshToken}%7C${unixTimestamp()}%7C5184000%7CMon%2C+03-Feb-2025+08%3A17%3A09+GMT`,
    `uid_tt=${USER_ID}`,
    `uid_tt_ss=${USER_ID}`,
    `sid_tt=${refreshToken}`,
    `sessionid=${refreshToken}`,
    `sessionid_ss=${refreshToken}`,
    `sid_tt=${refreshToken}`
  ].join("; ");
}

// 即梦API客户端类
class JimengApiClient {
  private refreshToken: string;

  constructor() {
    this.refreshToken = process.env.JIMENG_API_TOKEN || '';
    if (!this.refreshToken) {
      throw new Error('JIMENG_API_TOKEN 环境变量未设置');
    }
  }

  /**
   * 获取模型映射
   * @param model 模型名称
   * @returns 映射后的模型名称
   */
  private getModel(model: string): string {
    return MODEL_MAP[model] || MODEL_MAP[DEFAULT_MODEL];
  }

  /**
   * 发送请求到即梦API
   * @param method 请求方法
   * @param path 请求路径
   * @param data 请求数据
   * @param params 请求参数
   * @param headers 请求头
   * @returns 响应结果
   */
  private async request(
    method: string,
    path: string,
    data: any = {},
    params: any = {},
    headers: any = {}
  ): Promise<any> {
    const baseUrl = 'https://jimeng.jianying.com';
    const url = `${baseUrl}${path}`;
    const FAKE_HEADERS = {
      Accept: "application/json, text/plain, */*",
      "Accept-Encoding": "gzip, deflate, br, zstd",
      "Accept-language": "zh-CN,zh;q=0.9",
      "Cache-control": "no-cache",
      "Last-event-id": "undefined",
      Appid: DEFAULT_ASSISTANT_ID,
      Appvr: "5.8.0",
      Origin: "https://jimeng.jianying.com",
      Pragma: "no-cache",
      Priority: "u=1, i",
      Referer: "https://jimeng.jianying.com",
      Pf: "7",
      "Sec-Ch-Ua":
        '"Google Chrome";v="131", "Chromium";v="131", "Not_A Brand";v="24"',
      "Sec-Ch-Ua-Mobile": "?0",
      "Sec-Ch-Ua-Platform": '"Windows"',
      "Sec-Fetch-Dest": "empty",
      "Sec-Fetch-Mode": "cors",
      "Sec-Fetch-Site": "same-origin",
      "User-Agent":
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36",
    };
    const requestHeaders = {
      ...FAKE_HEADERS,
      'Cookie': generateCookie(this.refreshToken),
      ...headers
    };
    try {
      const response = await axios({
        method: method.toLowerCase(),
        url,
        data: method.toUpperCase() !== 'GET' ? data : undefined,
        params: method.toUpperCase() === 'GET' ? { ...data, ...params } : params,
        headers: requestHeaders
      });


      return response.data;
    } catch (error) {
      if (axios.isAxiosError(error) && error.response) {
        throw new Error(`即梦API请求错误: ${JSON.stringify(error.response.data)}`);
      } else {
        throw new Error(`即梦API请求失败: ${error}`);
      }
    }
  }

  /**
   * 获取积分信息
   * @returns 积分信息
   */
  public async getCredit(): Promise<Record<string, number>> {
    const result = await this.request(
      'POST',
      '/commerce/v1/benefits/user_credit',
      {},
      {},
      { 'Referer': 'https://jimeng.jianying.com/ai-tool/image/generate' }
    );

    const credit = result.credit || {};
    const giftCredit = credit.gift_credit || 0;
    const purchaseCredit = credit.purchase_credit || 0;
    const vipCredit = credit.vip_credit || 0;

    return {
      giftCredit,
      purchaseCredit,
      vipCredit,
      totalCredit: giftCredit + purchaseCredit + vipCredit
    };
  }

  /**
   * 领取积分
   */
  public async receiveCredit(): Promise<void> {
    await this.request(
      'POST',
      '/commerce/v1/benefits/credit_receive',
      { 'time_zone': 'Asia/Shanghai' },
      {},
      { 'Referer': 'https://jimeng.jianying.com/ai-tool/image/generate' }
    );
  }

  /**
   * 即梦AI图像生成
   * @param params 图像生成参数
   * @returns 生成的图像URL列表
   */
  public async generateImage(params: ImageGenerationParams): Promise<string[]> {
    // 参数验证
    if (!params.prompt || typeof params.prompt !== 'string') {
      throw new Error('prompt必须是非空字符串');
    }

    // 获取实际模型
    const modelName = params.model || DEFAULT_MODEL;
    const actualModel = this.getModel(modelName);

    // 检查积分
    const creditInfo = await this.getCredit();
    if (creditInfo.totalCredit <= 0) {
      await this.receiveCredit();
    }

    // 生成组件ID
    const componentId = generateUuid();
    const rqParams = {
      "babi_param": urlEncode(jsonEncode({
        "scenario": "image_video_generation",
        "feature_key": "aigc_to_image",
        "feature_entrance": "to_image",
        "feature_entrance_detail": `to_image-${actualModel}`,
      })),
      "aid": parseInt(DEFAULT_ASSISTANT_ID),
      "device_platform": "web",
      "region": "CN",
      "web_id": WEB_ID
    }
    const rqData = {
      "extend": {
        "root_model": actualModel,
        "template_id": "",
      },
      "submit_id": generateUuid(),
      "metrics_extra": jsonEncode({
        "templateId": "",
        "generateCount": 1,
        "promptSource": "custom",
        "templateSource": "",
        "lastRequestId": "",
        "originRequestId": "",
      }),
      "draft_content": jsonEncode({
        "type": "draft",
        "id": generateUuid(),
        "min_version": DRAFT_VERSION,
        "is_from_tsn": true,
        "version": "3.2.0",
        "main_component_id": componentId,
        "component_list": [{
          "type": "image_base_component",
          "id": componentId,
          "min_version": DRAFT_VERSION,
          "generate_type": "generate",
          "aigc_mode": "workbench",
          "abilities": {
            "type": "",
            "id": generateUuid(),
            "generate": {
              "type": "",
              "id": generateUuid(),
              "core_param": {
                "type": "",
                "id": generateUuid(),
                "model": actualModel,
                "prompt": params.prompt,
                "negative_prompt": params.negative_prompt || "",
                "seed": Math.floor(Math.random() * 100000000) + 2500000000,
                "sample_strength": params.sample_strength || 0.5,
                "image_ratio": 1,
                "large_image_info": {
                  "type": "",
                  "id": generateUuid(),
                  "height": params.height || 1024,
                  "width": params.width || 1024,
                  "resolution_type": '1k'
                }
              },
              "history_option": {
                "type": "",
                "id": generateUuid(),
              }
            }
          }
        }]
      }),
    }

    // console.log(rqData, rqParams, 'result');
    // 发送生成请求
    const result = await this.request(
      'POST',
      '/mweb/v1/aigc_draft/generate',
      rqData,
      rqParams
    );
    // 获取历史记录ID
    const historyId = result?.data?.aigc_data?.history_record_id;
    if (!historyId) {
      throw new Error('记录ID不存在');
    }

    // 轮询获取结果
    let status = 20;
    let failCode = null;
    let itemList: any[] = [];

    while (status === 20) {
      await new Promise(resolve => setTimeout(resolve, 1000));

      const result = await this.request(
        'POST',
        '/mweb/v1/get_history_by_ids',
        {
          "history_ids": [historyId],
          "image_info": {
            "width": 2048,
            "height": 2048,
            "format": "webp",
            "image_scene_list": [
              { "scene": "smart_crop", "width": 360, "height": 360, "uniq_key": "smart_crop-w:360-h:360", "format": "webp" },
              { "scene": "smart_crop", "width": 480, "height": 480, "uniq_key": "smart_crop-w:480-h:480", "format": "webp" },
              { "scene": "smart_crop", "width": 720, "height": 720, "uniq_key": "smart_crop-w:720-h:720", "format": "webp" },
              { "scene": "smart_crop", "width": 720, "height": 480, "uniq_key": "smart_crop-w:720-h:480", "format": "webp" },
              { "scene": "smart_crop", "width": 360, "height": 240, "uniq_key": "smart_crop-w:360-h:240", "format": "webp" },
              { "scene": "smart_crop", "width": 240, "height": 320, "uniq_key": "smart_crop-w:240-h:320", "format": "webp" },
              { "scene": "smart_crop", "width": 480, "height": 640, "uniq_key": "smart_crop-w:480-h:640", "format": "webp" },
              { "scene": "normal", "width": 2400, "height": 2400, "uniq_key": "2400", "format": "webp" },
              { "scene": "normal", "width": 1080, "height": 1080, "uniq_key": "1080", "format": "webp" },
              { "scene": "normal", "width": 720, "height": 720, "uniq_key": "720", "format": "webp" },
              { "scene": "normal", "width": 480, "height": 480, "uniq_key": "480", "format": "webp" },
              { "scene": "normal", "width": 360, "height": 360, "uniq_key": "360", "format": "webp" }
            ]
          },
          "http_common_info": {
            "aid": parseInt(DEFAULT_ASSISTANT_ID)
          }
        }
      );

      const record = result?.data?.[historyId];
      if (!record) {
        throw new Error('记录不存在');
      }

      status = record.status;
      failCode = record.fail_code;
      itemList = record.item_list || [];

      if (status === 30) {
        if (failCode === '2038') {
          throw new Error('内容被过滤');
        }
        throw new Error('图像生成失败');
      }
    }

    // 提取图片URL
    return itemList.map(item => {
      const imageUrl = item?.image?.large_images?.[0]?.image_url || item?.common_attr?.cover_url;
      return imageUrl;
    }).filter(Boolean);
  }
}

// 创建API客户端实例
const apiClient = new JimengApiClient();

// 导出函数，保持对外接口不变
export const generateImage = (params: ImageGenerationParams): Promise<string[]> => {
  return apiClient.generateImage(params);
};

// 导出接口定义，以便其他模块使用
export type { ImageGenerationParams, LogoInfo };

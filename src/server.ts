import { McpServer, ResourceTemplate } from "@modelcontextprotocol/sdk/server/mcp.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import { z } from "zod";
import { generateImage } from "./api.js";

// 定义服务器返回类型接口
export interface ServerInstance {
  server: McpServer;
  transport: StdioServerTransport;
}

// 创建MCP服务器
export const createServer = (): McpServer => {
  const server = new McpServer({
    name: "Jimeng MCP Server",
    version: "1.0.0"
  });

  // 添加一个简单的问候工具
  server.tool(
    "hello",
    { name: z.string() },
    async ({ name }) => ({
      content: [{ type: "text", text: `你好，${name}！` }]
    })
  );

  // 添加即梦AI图像生成工具
  server.tool(
    "generateImage",
    {
      prompt: z.string().describe("生成图像的文本描述"),
      req_key: z.string().default("jimeng_high_aes_general_v21_L").describe("取固定值: jimeng_high_aes_general_v21_L"),
      width: z.number().optional().default(512).describe("图像宽度，默认值：512"),
      height: z.number().optional().default(512).describe("图像高度，默认值：512"),
      seed: z.number().optional().default(-1).describe("随机种子，默认值：-1"),
      use_sr: z.boolean().optional().default(true).describe("文生图+AIGC超分"),
      use_pre_llm: z.boolean().optional().default(true).describe("开启文本扩写，针对输入prompt进行扩写优化，如果输入prompt较短建议开启，如果输入prompt较长建议关闭"),
      return_url: z.boolean().optional().default(true).describe("输出是否返回图片链接（链接有效期为24小时）"),
      logo_info: z.object({
        add_logo: z.boolean().optional().describe("是否添加水印，默认不添加"),
        position: z.number().optional().describe("水印位置：0-右下角 1-左下角 2-左上角 3-右上角"),
        language: z.number().optional().describe("水印语言：0-中文(AI生成) 1-英文(Generated by AI)"),
        opacity: z.number().optional().describe("水印透明度：0-1，默认0.3"),
        logo_text_content: z.string().optional().describe("水印文字内容")
      }).optional().describe("水印信息")
    },
    async (params) => {
      try {
        const imageUrls = await generateImage(params);

        // 如果没有返回URL数组，返回错误信息
        if (!imageUrls || (Array.isArray(imageUrls) && imageUrls.length === 0)) {
          return {
            content: [{ type: "text", text: "图像生成失败：未能获取图像URL" }],
            isError: true
          };
        }

        // 定义正确的类型
        type ContentItem = { type: "resource"; resource: { uri: string; blob: string; mimeType: string } }

        // 将返回的图像URL转换为MCP响应格式
        const responseContent: ContentItem[] = []

        if (typeof imageUrls === 'string') {
          // 单个URL的情况
          responseContent.push({
            type: "resource",
            resource: {
              uri: imageUrls,
              blob: '',
              mimeType: ''
            }
          });
        } else if (Array.isArray(imageUrls)) {
          // URL数组的情况
          for (const url of imageUrls) {
            responseContent.push({
              type: "resource",
              resource: {
                uri: url,
                mimeType: '',
                blob: ''
              }
            });
          }
        }

        return {
          content: responseContent
        };
      } catch (error) {
        const errorMessage = error instanceof Error ? error.message : String(error);
        return {
          content: [{ type: "text", text: `图像生成失败: ${errorMessage}` }],
          isError: true
        };
      }
    }
  );

  // 添加一个问候资源
  server.resource(
    "greeting",
    new ResourceTemplate("greeting://{name}", { list: undefined }),
    async (uri, { name }) => ({
      contents: [{
        uri: uri.href,
        text: `欢迎使用Jimeng MCP服务器，${name}！`
      }]
    })
  );

  // 添加一个静态信息资源
  server.resource(
    "info",
    "info://server",
    async (uri) => ({
      contents: [{
        uri: uri.href,
        text: `
            Jimeng MCP 服务器
            版本: 1.0.0
            运行于: ${process.platform}
            Node版本: ${process.version}
        `
      }]
    })
  );

  // 添加即梦AI图像生成服务信息资源
  server.resource(
    "jimeng-ai",
    "jimeng-ai://info",
    async (uri) => ({
      contents: [{
        uri: uri.href,
        text: `
          即梦AI图像生成服务
          -----------------
          通过使用 generateImage 工具提交图像生成请求

          需要在环境变量中设置:
          VOLCENGINE_ACCESS_KEY - 火山引擎访问密钥
          VOLCENGINE_SECRET_KEY - 火山引擎安全密钥

          参数说明:
          - prompt: 生成图像的文本描述（必填）
          - req_key: 模型名称，取固定值: jimeng_high_aes_general_v21_L（已设默认值）
          - width: 图像宽度，默认值：512（可选）
          - height: 图像高度，默认值：512（可选）
          - seed: 随机种子，默认值：-1（可选）
          - use_sr: 文生图+AIGC超分（可选，布尔值）
          - use_pre_llm: 开启文本扩写，针对输入prompt进行扩写优化，如果输入prompt较短建议开启，如果输入prompt较长建议关闭（可选，布尔值）
          - return_url: 输出是否返回图片链接，链接有效期为24小时（可选，默认为true）
          - logo_info: 水印信息（可选，对象）
            - add_logo: 是否添加水印，默认不添加（可选，布尔值）
            - position: 水印位置，0-右下角 1-左下角 2-左上角 3-右上角（可选，数字）
            - language: 水印语言，0-中文(AI生成) 1-英文(Generated by AI)（可选，数字）
            - opacity: 水印透明度，范围0-1，默认0.3（可选，数字）
            - logo_text_content: 水印文字内容（可选，字符串）

          示例:
          generateImage({
            "prompt": "一只可爱的猫咪",
            "width": 512,
            "height": 512,
            "use_pre_llm": true,
            "logo_info": {
              "add_logo": true,
              "position": 0,
              "language": 0,
              "opacity": 0.5
            }
          })
        `
      }]
    })
  );

  return server;
};

// 启动服务器
export const startServer = async (): Promise<ServerInstance> => {
  const server = createServer();
  const transport = new StdioServerTransport();

  console.log("Jimeng MCP Server 正在启动...");

  await server.connect(transport);

  console.log("Jimeng MCP Server 已启动");

  return { server, transport };
}; 